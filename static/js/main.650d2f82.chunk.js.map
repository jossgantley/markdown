{"version":3,"sources":["contexts/Context.js","components/Editor.js","components/Previewer.js","App.js","serviceWorker.js","index.js"],"names":["Context","createContext","ContextProvider","props","useState","text","setText","Provider","value","children","Editor","useContext","id","onChange","e","target","Previewer","str","useEffect","document","getElementById","dangerouslySetInnerHTML","__html","marked","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAEaA,EAAUC,0BAeRC,EAbS,SAACC,GAAW,IAAD,EAEPC,mBAAS,IAFF,mBAExBC,EAFwB,KAElBC,EAFkB,KAI/B,OACI,6BACI,kBAACN,EAAQO,SAAT,CAAkBC,MAAO,CAACH,OAAMC,YAC3BH,EAAMM,YCURC,EAjBA,WAAO,IACfJ,EAAWK,qBAAWX,GAAtBM,QAKH,OACI,6BACI,8BACAM,GAAG,SACHC,SARS,SAACC,GACjBR,EAASQ,EAAEC,OAAOP,Y,iBC8DRQ,EA/DG,WAAO,IAAD,EACIL,qBAAWX,GAA5BM,EADa,EACbA,QAASD,EADI,EACJA,KACVY,EAAI,seAyCVC,qBAAU,WAERC,SAASC,eAAe,UAAUZ,MAAMS,EACxCX,EAAQW,KAEP,CAACA,EAAKX,IAQT,OACI,yBAAKe,wBAJE,CAACC,OAAQC,IAAOlB,IAIuBO,GAAG,aC7C1CY,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASC,eAAe,SDyHpB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.650d2f82.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nexport const Context = createContext();\n\nconst ContextProvider = (props) => {\n   \n    const [text, setText] = useState(\"\")\n \n    return ( \n        <div>\n            <Context.Provider value={{text, setText}}>\n                {props.children}\n            </Context.Provider>\n        </div>\n     );\n}\n \nexport default ContextProvider;","import React, { useContext } from \"react\"\nimport { Context } from \"../contexts/Context\"\n\n\nconst Editor = () => {\nconst {setText} = useContext(Context);\nconst handleChange = (e) => {\n    (setText((e.target.value)))\n}\n\n    return ( \n        <div>\n            <textarea\n            id=\"editor\"\n            onChange={handleChange}\n            \n            />\n        </div>\n     );\n}\n \nexport default Editor;","import React, { useContext, useEffect} from \"react\";\nimport {Context} from \"../contexts/Context\";\nimport marked from \"marked\"\n\n\n\nconst Previewer = () => {\n    const {setText, text} = useContext(Context);\n    const str=`# Welcome\n\n ## This is not a sub-heading\n\n**This is bold**\n\nHere is some code: \\`<div></div>\\`\n\nHere is some multi-line code: \n\\`\\`\\`\nrandomFunction = () =>{\n    console.log(\"This is cool\");\n}\n\\`\\`\\`\nHere is a link: [example link](\"https://example.io\")\n\nHere is an unordered list:\n\n- item 1\n- item 2\n- item 3\n\nHere is an ordered list:\n\n1. item 1\n2. item 2\n3. item 3\n\nHere is a \n> block quote\n\nHere is an embedded image\n\n![React Logo](https://goo.gl/Umyytc)\n`\n    \n\n\n\n   \n    \n    useEffect(() => {\n    \n      document.getElementById(\"editor\").value=str; \n      setText(str);\n       \n    }, [str, setText])\n   \n   \n    const createMarkup = () =>{\n        \n        return {__html: marked(text)};\n      \n    }\n    return ( \n        <div dangerouslySetInnerHTML={createMarkup()} id=\"preview\">\n           \n        </div>\n     );\n\n    }\nexport default Previewer;\n","import React from 'react';\nimport ContextProvider from './contexts/Context';\nimport Editor from './components/Editor';\nimport Previewer from './components/Previewer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ContextProvider>\n        <Editor/>\n        <Previewer/>\n      </ContextProvider>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}